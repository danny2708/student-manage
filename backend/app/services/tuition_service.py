from sqlalchemy.orm import Session
from datetime import date, datetime, timezone
from decimal import Decimal

from app.models.student_model import Student
from app.models.class_model import Class
from app.models.association_tables import student_class_association
from app.schemas.tuition_schema import TuitionCreate
from app.crud import tuition_crud
from app.models.tuition_model import Tuition, PaymentStatus
from app.crud import notification_crud
from app.schemas.notification_schema import NotificationCreate
from app.crud import student_crud

def calculate_tuition_for_student(db: Session, student_id: int) -> Decimal:
    """
    T√≠nh h·ªçc ph√≠ cho 1 h·ªçc sinh d·ª±a tr√™n s·ªë l·ªõp h·ªçc sinh ƒë√≥ ƒëang theo h·ªçc.
    C√¥ng th·ª©c: T·ªïng h·ªçc ph√≠ = SUM(fee c·ªßa m·ªói l·ªõp).
    """
    student_classes = (
        db.query(Class)
        .join(student_class_association)
        .filter(student_class_association.c.student_id == student_id)
        .all()
    )

    if not student_classes:
        return Decimal(0)

    total_tuition = Decimal(0)
    for cls in student_classes:
        total_tuition += cls.fee

    return total_tuition


def create_tuition_record_for_student(
    db: Session, student_id: int, term: int, due_date: date
):
    """
    T·∫°o m·ªôt b·∫£n ghi h·ªçc ph√≠ m·ªõi cho h·ªçc sinh sau khi t√≠nh to√°n.
    - M·∫∑c ƒë·ªãnh payment_status = "unpaid"
    - payment_date = None (v√¨ ch∆∞a thanh to√°n)
    """
    tuition_amount = calculate_tuition_for_student(db, student_id)

    if tuition_amount <= Decimal(0):
        return None

    tuition_data = TuitionCreate(
        student_id=student_id,
        amount=float(tuition_amount),  # √©p v·ªÅ float cho schema
        term=term,
        due_date=due_date,
    )

    db_tuition = tuition_crud.create_tuition(db, tuition=tuition_data)
    return db_tuition


def create_tuition_for_all_students(db: Session, term: int, due_date: date):
    student_ids = db.query(Student.student_id)

    successful_creations = 0
    failed_creations = 0

    for student_id_tuple in student_ids:
        student_id = student_id_tuple[0]
        try:
            db_tuition = create_tuition_record_for_student(
                db, student_id=student_id, term=term, due_date=due_date
            )

            if db_tuition:
                successful_creations += 1

                # L·∫•y t√™n h·ªçc sinh
                student, student_user = student_crud.get_student_with_user(db, student_id)
                if not student_user:
                    continue
                student_name = student_user.full_name

                # üîî G·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ ph·ª• huynh
                parents_with_users = student_crud.get_parents_by_student_id(db, student_id)
                for parent, parent_user in parents_with_users:
                    if parent_user:
                        notification_in = NotificationCreate(
                            sender_id=None,  # h·ªá th·ªëng
                            receiver_id=parent_user.user_id,
                            content=f"H·ªçc ph√≠ k·ª≥ {term} c·ªßa h·ªçc sinh {student_name} "
                                    f"l√† {db_tuition.amount}, h·∫°n n·ªôp: {due_date}.",
                            sent_at=datetime.now(timezone.utc),
                            type="tuition"
                        )
                        notification_crud.create_notification(db, notification_in)

        except Exception as e:
            failed_creations += 1
            print(f"L·ªói khi t·∫°o h·ªçc ph√≠ cho sinh vi√™n ID {student_id}: {e}")
            db.rollback()

    try:
        db.commit()
    except Exception as e:
        print(f"L·ªói trong qu√° tr√¨nh commit cu·ªëi c√πng: {e}")
        db.rollback()

    print(f"--- K·∫æT QU·∫¢ T·∫†O H·ªåC PH√ç ---")
    print(f"Th√†nh c√¥ng: {successful_creations} b·∫£n ghi")
    print(f"Th·∫•t b·∫°i/L·ªói: {failed_creations} b·∫£n ghi")
    print(f"--------------------------")


def update_overdue_tuitions(db: Session):
    """C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c√°c kho·∫£n h·ªçc ph√≠ ƒë√£ qu√° h·∫°n."""
    today = date.today()
    
    # T√¨m t·∫•t c·∫£ c√°c b·∫£n ghi h·ªçc ph√≠ "unpaid" m√† due_date ƒë√£ qua
    overdue_tuitions = db.query(Tuition).filter(
        Tuition.payment_status == PaymentStatus.unpaid,
        Tuition.due_date < today
    ).all()
    
    updated_count = 0
    for tuition in overdue_tuitions:
        tuition.payment_status = PaymentStatus.overdue
        updated_count += 1
    
    if updated_count > 0:
        db.commit()
    
    print(f"ƒê√£ c·∫≠p nh·∫≠t {updated_count} b·∫£n ghi h·ªçc ph√≠ th√†nh 'overdue'.")